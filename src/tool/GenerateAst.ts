import * as lox from "../lox";

const test = new lox.Expr.Assign(
  new lox.Token({ type: lox.TokenType.IDENTIFIER, lexeme: "a", line: 1 }),
  new lox.Expr.Binary(
    new lox.Expr.Literal("123"),
    new lox.Token({ type: lox.TokenType.PLUS, lexeme: "+", line: 1 }),
    new lox.Expr.Binary(
      new lox.Expr.Literal("123"),
      new lox.Token({ type: lox.TokenType.MINUS, lexeme: "-", line: 1 }),
      new lox.Expr.Literal("42")
    )
  )
);

console.log("test", new lox.AstPrinter().print(test));

// new lox.Token({ type: lox.TokenType.PLUS, lexeme: "-", line: 1 }),
//
//   new Token(TokenType.MINUS, "-", null, 1),
//   new Expr.Literal(123),
// new Token(TokenType.STAR, "*", null, 1),
// new Expr.Grouping(
//   new Expr.Literal(45.67)));

// // http://craftinginterpreters.com/representing-code.html

// import fs from "fs";

// const COMMENT = Object.freeze([
//   "this file is auto generated by /tools/GenerateAst",
//   "http://craftinginterpreters.com/representing-code.html"
// ]);
// const AST_TEMPLATE = Object.freeze({
//   Binary: ["left: Expr, operator: lox.TokenType, right: Expr"],
//   Group: ["expression: Expr"],
//   Literal: ["value: object"],
//   Unary: ["operator: lox.TokenType", "right: Expr"]
// });

// class GenerateAst {
//   private static lines: string[] = [];

//   public static writeFile() {
//     GenerateAst.defineAst();
//     const data = GenerateAst.lines.join("\n");

//     fs.writeFile("src/lox/Expr.ts", data, err => {
//       if (err) throw err;
//       console.log("The file has been saved!");
//     });
//   }

//   private static addLine(line: string = "", ind = 0) {
//     GenerateAst.lines.push(`${"  ".repeat(ind)}${line}`);
//   }

//   private static defineAst() {
//     COMMENT.forEach(l => GenerateAst.addLine(`// ${l}`));
//     GenerateAst.addLine();
//     GenerateAst.addLine('import * as lox from "./"');
//     GenerateAst.addLine();
//     GenerateAst.addLine("export module Expr {");
//     GenerateAst.addLine("export abstract class Expr {", 1);
//     GenerateAst.addLine("// ...", 2);
//     GenerateAst.addLine("}", 1);

//     Object.entries(AST_TEMPLATE).forEach(([className, fieldList]) =>
//       GenerateAst.defineType(className, fieldList, 1)
//     );
//     GenerateAst.addLine("}");
//   }

//   private static defineType(
//     className: string,
//     fieldList: string[],
//     baseInd = 0
//   ) {
//     GenerateAst.addLine();
//     GenerateAst.addLine(`export class ${className} extends Expr {`, baseInd);
//     GenerateAst.addLine(
//       `constructor(${fieldList.map(f => `public ${f}`).join(", ")}) {`,
//       baseInd + 1
//     );
//     GenerateAst.addLine(`super();`, baseInd + 2);
//     GenerateAst.addLine(`}`, baseInd + 1);
//     GenerateAst.addLine(`}`, baseInd);
//   }
// }

// GenerateAst.writeFile();

// // abstract class Expr {
// //   abstract accept(visitor: Visitor<R>);
// // }

// // export class Binary extends Expr {
// //   constructor(public left: Expr, public operator: any, public right: Expr) {
// //     super();
// //   }
// //   public accept(visitor: Visitor<R>) {
// //     return visitor.visitBinaryExpr(this);
// //   }
// // }

// // export class Grouping extends Expr {
// //   constructor(public expression: Expr) {
// //     super();
// //   }
// //   public accept(visitor: Visitor<R>) {
// //     return visitor.visitGroupExpr(this);
// //   }
// // }
