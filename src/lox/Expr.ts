// this file is auto generated by /tools/GenerateAst
// http://craftinginterpreters.com/representing-code.html

import * as lox from "./";

export module Expr {
  export abstract class Expr {
    public abstract accept<T>(visitor: Visitor<T>): T;
  }

  export class Assign extends Expr {
    constructor(public name: lox.Token, public value: Expr) {
      super();
    }
    public accept<T>(visitor: Visitor<T>): T {
      return visitor.visitAssignExpr(this);
    }
  }
  export class Binary extends Expr {
    constructor(
      public left: Expr,
      public operator: lox.Token,
      public right: Expr
    ) {
      super();
    }
    public accept<T>(visitor: Visitor<T>): T {
      return visitor.visitBinaryExpr(this);
    }
  }
  export class Call extends Expr {
    constructor(
      public callee: Expr,
      public paren: lox.Token,
      public args: Expr[] // arguments
    ) {
      super();
    }
    public accept<T>(visitor: Visitor<T>): T {
      return visitor.visitCallExpr(this);
    }
  }
  export class Get extends Expr {
    constructor(public object: Expr, public name: lox.Token) {
      super();
    }
    public accept<T>(visitor: Visitor<T>): T {
      return visitor.visitGetExpr(this);
    }
  }
  export class Grouping extends Expr {
    constructor(public expression: Expr) {
      super();
    }
    public accept<T>(visitor: Visitor<T>): T {
      return visitor.visitGroupingExpr(this);
    }
  }
  export class Literal extends Expr {
    constructor(public value: any) {
      super();
    }
    public accept<T>(visitor: Visitor<T>): T {
      return visitor.visitLiteralExpr(this);
    }
  }
  // Logical: visitLogicalExpr(expr: Logical): T;
  // Set: visitSetExpr(expr: Set): T;
  // Super: visitSuperExpr(expr: Super): T;
  // This: visitThisExpr(expr: This): T;
  // Unary: visitUnaryExpr(expr: Unary): T;
  export class Unary extends Expr {
    constructor(public operator: lox.Token, public right: lox.Expr.Expr) {
      super();
    }
    public accept<T>(visitor: Visitor<T>): T {
      return visitor.visitUnaryExpr(this);
    }
  }
  export class Variable extends Expr {
    constructor(public name: lox.Token) {
      super();
    }
    public accept<T>(visitor: Visitor<T>): T {
      return visitor.visitVariableExpr(this);
    }
  }

  export interface Visitor<T> {
    visitAssignExpr(expr: Assign): T;
    visitBinaryExpr(expr: Binary): T;
    visitCallExpr(expr: Call): T;
    visitGetExpr(expr: Get): T;
    visitGroupingExpr(expr: Grouping): T;
    visitLiteralExpr(expr: Literal): T;
    // visitLogicalExpr(expr: Logical): T;
    // visitSetExpr(expr: Set): T;
    // visitSuperExpr(expr: Super): T;
    // visitThisExpr(expr: This): T;
    visitUnaryExpr(expr: Unary): T;
    visitVariableExpr(expr: Variable): T;
  }
}
